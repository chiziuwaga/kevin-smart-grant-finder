"""
Application settings and configuration.
"""
from functools import lru_cache
from typing import Optional
from pydantic import Field
from pydantic_settings import BaseSettings, SettingsConfigDict

from dotenv import load_dotenv
load_dotenv()

class Settings(BaseSettings):
    """Application settings."""
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        extra="allow"  # Allow extra fields from env
    )

    # Application
    debug: bool = Field(default=False, env="DEBUG")
    environment: str = Field(default="development", env="APP_ENV")
    secret_key: str = Field(default="default-secret-key", env="SECRET_KEY")

    # Database
    db_host: str = Field(default="localhost", env="DB_HOST")
    db_port: int = Field(default=5432, env="DB_PORT")
    db_user: str = Field(default="postgres", env="DB_USER")
    db_pass: str = Field(default="", env="DB_PASSWORD")
    db_name: str = Field(default="grantfinder", env="DB_NAME")
    database_url: Optional[str] = Field(default=None, env="DATABASE_URL")

    @property
    def db_url(self) -> str:
        """Get database URL."""
        if self.database_url:
            return self.database_url
            
        return f"postgresql+asyncpg://{self.db_user}:{self.db_pass}@{self.db_host}:{self.db_port}/{self.db_name}"

@lru_cache()
def get_settings() -> Settings:
    """Get cached settings instance."""
    return Settings()
