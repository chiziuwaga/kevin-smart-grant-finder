"""
Application settings and configuration.
"""
from typing import Optional
from pydantic import Field
from pydantic_settings import BaseSettings, SettingsConfigDict

from dotenv import load_dotenv
load_dotenv()

class Settings(BaseSettings):
    """Application settings."""
    model_config = SettingsConfigDict(env_file=".env", env_file_encoding="utf-8")

    # Application
    debug: bool = Field(default=False)
    environment: str = Field(default="development")
    secret_key: str = Field(default="default-secret-key")

    # Database
    db_host: str = Field(default="localhost", env="DB_HOST")
    db_port: int = Field(default=5432, env="DB_PORT")
    db_user: str = Field(default="postgres", env="DB_USER")
    db_pass: str = Field(default="", env="DB_PASSWORD")
    db_name: str = Field(default="grantfinder", env="DB_NAME")
    database_url: Optional[str] = Field(default=None, env="DATABASE_URL")

    # API Keys
    pinecone_api_key: str = Field(default="", env="PINECONE_API_KEY")
    pinecone_index: str = Field(default="grants", env="PINECONE_INDEX")
    perplexity_api_key: str = Field(default="", env="PERPLEXITY_API_KEY")
    perplexity_rate_limit: int = Field(default=30, env="PERPLEXITY_RATE_LIMIT")

    # Notifications
    telegram_token: str = Field(default="", env="TELEGRAM_TOKEN")
    telegram_chat_id: str = Field(default="", env="TELEGRAM_CHAT_ID")

    @property
    def db_url(self) -> str:
        """Get database URL."""
        if self.database_url:
            return self.database_url
            
        return DatabaseURL.build_connection_string(
            user=self.db_user,
            password=self.db_pass,
            host=self.db_host,
            port=self.db_port,
            db=self.db_name
        )

@lru_cache()
def get_settings() -> Settings:
    """Get cached settings instance."""
    return Settings()
