"""phase1_foundation_data_modeling

Revision ID: a6d046fdb2d0
Revises: 47a1c91bfecc
Create Date: 2025-06-07 16:03:07.566266

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # If using PostgreSQL for JSONB or specific types


# revision identifiers, used by Alembic.
revision: str = 'a6d046fdb2d0'
down_revision: Union[str, None] = '47a1c91bfecc' # Link to the previous migration
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Explicitly drop the ENUM type if it exists to prevent DuplicateObjectError
    op.execute("DROP TYPE IF EXISTS applicationstatus CASCADE;")

    # Define the ENUM type for use in the table definition
    # SQLAlchemy will handle its creation when the table is created.
    application_status_enum = postgresql.ENUM('NOT_APPLIED', 'DRAFTING', 'APPLIED', 'UNDER_REVIEW', 'AWARDED', 'REJECTED', 'WITHDRAWN', name='applicationstatus')

    # Modify 'grants' table
    op.add_column('grants', sa.Column('source_name', sa.String(), nullable=True))
    # op.alter_column('grants', 'source_url', existing_type=sa.VARCHAR(), nullable=True) # Assuming it exists and might need type adjustment
    op.add_column('grants', sa.Column('identified_sector', sa.String(), nullable=True))
    op.create_index(op.f('ix_grants_identified_sector'), 'grants', ['identified_sector'], unique=False)
    op.add_column('grants', sa.Column('identified_sub_sector', sa.String(), nullable=True))
    op.create_index(op.f('ix_grants_identified_sub_sector'), 'grants', ['identified_sub_sector'], unique=False)
    op.add_column('grants', sa.Column('geographic_scope', sa.String(), nullable=True))
    op.add_column('grants', sa.Column('specific_location_mentions', sa.JSON(), nullable=True))
    op.add_column('grants', sa.Column('raw_source_data', sa.JSON(), nullable=True))
    op.add_column('grants', sa.Column('enrichment_log', sa.JSON(), nullable=True))
    op.add_column('grants', sa.Column('last_enriched_at', sa.DateTime(), nullable=True))

    # Drop old columns if they are being replaced and not just nullable
    # op.drop_column('grants', 'status') # If GrantStatus enum is no longer used on Grant directly - RETAINING THIS
    op.drop_column('grants', 'eligibility') # If replaced by structured compliance
    op.drop_column('grants', 'source') # Replaced by source_name and source_url
    op.drop_column('grants', 'category') # Replaced by identified_sector / identified_sub_sector


    # Modify 'analyses' table
    op.alter_column('analyses', 'grant_id', existing_type=sa.INTEGER(), nullable=False)
    op.add_column('analyses', sa.Column('final_score', sa.Float(), nullable=True))
    op.create_index(op.f('ix_analyses_final_score'), 'analyses', ['final_score'], unique=False)
    op.add_column('analyses', sa.Column('relevance_score', sa.Float(), nullable=True))
    op.add_column('analyses', sa.Column('compliance_score', sa.Float(), nullable=True))
    op.add_column('analyses', sa.Column('feasibility_score', sa.Float(), nullable=True))
    op.add_column('analyses', sa.Column('relevance_details', sa.JSON(), nullable=True))
    op.add_column('analyses', sa.Column('compliance_details', sa.JSON(), nullable=True))
    op.add_column('analyses', sa.Column('feasibility_details', sa.JSON(), nullable=True))
    op.add_column('analyses', sa.Column('overall_summary', sa.String(), nullable=True))
    
    op.drop_index('ix_analyses_score', table_name='analyses') # Drop old index if 'score' column is renamed/removed
    op.drop_column('analyses', 'score') # Assuming 'score' is renamed to 'final_score'
    op.drop_column('analyses', 'notes') # If notes are now part of JSON details


    # Create 'application_history' table
    op.create_table('application_history',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('grant_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.String(), nullable=False),
        sa.Column('application_date', sa.DateTime(), nullable=True),
        sa.Column('status', application_status_enum, nullable=False), # Use the defined enum
        sa.Column('status_reason', sa.String(), nullable=True),
        sa.Column('award_amount', sa.Float(), nullable=True),
        sa.Column('feedback_notes', sa.String(), nullable=True),
        sa.Column('is_successful_outcome', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True), # Adjusted for SQLite/Generic SQL
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True), # Adjusted for SQLite/Generic SQL
        sa.ForeignKeyConstraint(['grant_id'], ['grants.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_application_history_grant_id'), 'application_history', ['grant_id'], unique=False)
    op.create_index(op.f('ix_application_history_user_id'), 'application_history', ['user_id'], unique=False)
    op.create_index(op.f('ix_application_history_status'), 'application_history', ['status'], unique=False) # Index on status

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop 'application_history' table
    op.drop_index(op.f('ix_application_history_status'), table_name='application_history')
    op.drop_index(op.f('ix_application_history_user_id'), table_name='application_history')
    op.drop_index(op.f('ix_application_history_grant_id'), table_name='application_history')
    op.drop_table('application_history')

    # Revert 'analyses' table changes
    op.add_column('analyses', sa.Column('notes', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('analyses', sa.Column('score', sa.FLOAT(), autoincrement=False, nullable=True))
    op.create_index('ix_analyses_score', 'analyses', ['score'], unique=False) # Recreate old index
    op.drop_column('analyses', 'overall_summary')
    op.drop_column('analyses', 'feasibility_details')
    op.drop_column('analyses', 'compliance_details')
    op.drop_column('analyses', 'relevance_details')
    op.drop_column('analyses', 'feasibility_score')
    op.drop_column('analyses', 'compliance_score')
    op.drop_column('analyses', 'relevance_score')
    op.drop_index(op.f('ix_analyses_final_score'), table_name='analyses')
    op.drop_column('analyses', 'final_score')
    op.alter_column('analyses', 'grant_id', existing_type=sa.INTEGER(), nullable=True) # Or original nullable status


    # Revert 'grants' table changes
    op.add_column('grants', sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('grants', sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('grants', sa.Column('eligibility', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    # op.add_column('grants', sa.Column('status', postgresql.ENUM('ACTIVE', 'EXPIRED', 'DRAFT', 'ARCHIVED', name='grantstatus', create_type=False), autoincrement=False, nullable=True)) # RETAINING THIS
    op.drop_column('grants', 'last_enriched_at')
    op.drop_column('grants', 'enrichment_log')
    op.drop_column('grants', 'raw_source_data')
    op.drop_column('grants', 'specific_location_mentions')
    op.drop_column('grants', 'geographic_scope')
    op.drop_index(op.f('ix_grants_identified_sub_sector'), table_name='grants')
    op.drop_column('grants', 'identified_sub_sector')
    op.drop_index(op.f('ix_grants_identified_sector'), table_name='grants')
    op.drop_column('grants', 'identified_sector')
    # op.alter_column('grants', 'source_url', existing_type=sa.VARCHAR(), nullable=True) # Or original nullable status
    op.drop_column('grants', 'source_name')

    # Drop ApplicationStatus ENUM type
    application_status_enum = postgresql.ENUM('NOT_APPLIED', 'DRAFTING', 'APPLIED', 'UNDER_REVIEW', 'AWARDED', 'REJECTED', 'WITHDRAWN', name='applicationstatus')
    application_status_enum.drop(op.get_bind(), checkfirst=True) # Keep checkfirst=True for downgrade safety

    # ### end Alembic commands ###
